{"ast":null,"code":"// Extensions\nimport { Service } from '../service'; // Utilities\n\nimport { getObjectValueByPath } from '../../util/helpers';\nimport { consoleError, consoleWarn } from '../../util/console';\nconst LANG_PREFIX = '$vuetify.';\nconst fallback = Symbol('Lang fallback');\nfunction getTranslation(locale, key, usingDefault = false, defaultLocale) {\n  const shortKey = key.replace(LANG_PREFIX, '');\n  let translation = getObjectValueByPath(locale, shortKey, fallback);\n  if (translation === fallback) {\n    if (usingDefault) {\n      consoleError(`Translation key \"${shortKey}\" not found in fallback`);\n      translation = key;\n    } else {\n      consoleWarn(`Translation key \"${shortKey}\" not found, falling back to default`);\n      translation = getTranslation(defaultLocale, key, true, defaultLocale);\n    }\n  }\n  return translation;\n}\nexport class Lang extends Service {\n  constructor(preset) {\n    super();\n    this.defaultLocale = 'en';\n    const {\n      current,\n      locales,\n      t\n    } = preset[Lang.property];\n    this.current = current;\n    this.locales = locales;\n    this.translator = t || this.defaultTranslator;\n  }\n  currentLocale(key) {\n    const translation = this.locales[this.current];\n    const defaultLocale = this.locales[this.defaultLocale];\n    return getTranslation(translation, key, false, defaultLocale);\n  }\n  t(key, ...params) {\n    if (!key.startsWith(LANG_PREFIX)) return this.replace(key, params);\n    return this.translator(key, ...params);\n  }\n  defaultTranslator(key, ...params) {\n    return this.replace(this.currentLocale(key), params);\n  }\n  replace(str, params) {\n    return str.replace(/\\{(\\d+)\\}/g, (match, index) => {\n      /* istanbul ignore next */\n      return String(params[+index]);\n    });\n  }\n}\nLang.property = 'lang';","map":{"version":3,"names":["Service","getObjectValueByPath","consoleError","consoleWarn","LANG_PREFIX","fallback","Symbol","getTranslation","locale","key","usingDefault","defaultLocale","shortKey","replace","translation","Lang","constructor","preset","current","locales","t","property","translator","defaultTranslator","currentLocale","params","startsWith","str","match","index","String"],"sources":["/home/sai/Desktop/SoftChat/softchat/node_modules/vuetify/lib/services/lang/index.js"],"sourcesContent":["// Extensions\nimport { Service } from '../service'; // Utilities\n\nimport { getObjectValueByPath } from '../../util/helpers';\nimport { consoleError, consoleWarn } from '../../util/console';\nconst LANG_PREFIX = '$vuetify.';\nconst fallback = Symbol('Lang fallback');\n\nfunction getTranslation(locale, key, usingDefault = false, defaultLocale) {\n  const shortKey = key.replace(LANG_PREFIX, '');\n  let translation = getObjectValueByPath(locale, shortKey, fallback);\n\n  if (translation === fallback) {\n    if (usingDefault) {\n      consoleError(`Translation key \"${shortKey}\" not found in fallback`);\n      translation = key;\n    } else {\n      consoleWarn(`Translation key \"${shortKey}\" not found, falling back to default`);\n      translation = getTranslation(defaultLocale, key, true, defaultLocale);\n    }\n  }\n\n  return translation;\n}\n\nexport class Lang extends Service {\n  constructor(preset) {\n    super();\n    this.defaultLocale = 'en';\n    const {\n      current,\n      locales,\n      t\n    } = preset[Lang.property];\n    this.current = current;\n    this.locales = locales;\n    this.translator = t || this.defaultTranslator;\n  }\n\n  currentLocale(key) {\n    const translation = this.locales[this.current];\n    const defaultLocale = this.locales[this.defaultLocale];\n    return getTranslation(translation, key, false, defaultLocale);\n  }\n\n  t(key, ...params) {\n    if (!key.startsWith(LANG_PREFIX)) return this.replace(key, params);\n    return this.translator(key, ...params);\n  }\n\n  defaultTranslator(key, ...params) {\n    return this.replace(this.currentLocale(key), params);\n  }\n\n  replace(str, params) {\n    return str.replace(/\\{(\\d+)\\}/g, (match, index) => {\n      /* istanbul ignore next */\n      return String(params[+index]);\n    });\n  }\n\n}\nLang.property = 'lang';\n//# sourceMappingURL=index.js.map"],"mappings":"AAAA;AACA,SAASA,OAAO,QAAQ,YAAY,CAAC,CAAC;;AAEtC,SAASC,oBAAoB,QAAQ,oBAAoB;AACzD,SAASC,YAAY,EAAEC,WAAW,QAAQ,oBAAoB;AAC9D,MAAMC,WAAW,GAAG,WAAW;AAC/B,MAAMC,QAAQ,GAAGC,MAAM,CAAC,eAAe,CAAC;AAExC,SAASC,cAAcA,CAACC,MAAM,EAAEC,GAAG,EAAEC,YAAY,GAAG,KAAK,EAAEC,aAAa,EAAE;EACxE,MAAMC,QAAQ,GAAGH,GAAG,CAACI,OAAO,CAACT,WAAW,EAAE,EAAE,CAAC;EAC7C,IAAIU,WAAW,GAAGb,oBAAoB,CAACO,MAAM,EAAEI,QAAQ,EAAEP,QAAQ,CAAC;EAElE,IAAIS,WAAW,KAAKT,QAAQ,EAAE;IAC5B,IAAIK,YAAY,EAAE;MAChBR,YAAY,CAAE,oBAAmBU,QAAS,yBAAwB,CAAC;MACnEE,WAAW,GAAGL,GAAG;IACnB,CAAC,MAAM;MACLN,WAAW,CAAE,oBAAmBS,QAAS,sCAAqC,CAAC;MAC/EE,WAAW,GAAGP,cAAc,CAACI,aAAa,EAAEF,GAAG,EAAE,IAAI,EAAEE,aAAa,CAAC;IACvE;EACF;EAEA,OAAOG,WAAW;AACpB;AAEA,OAAO,MAAMC,IAAI,SAASf,OAAO,CAAC;EAChCgB,WAAWA,CAACC,MAAM,EAAE;IAClB,KAAK,EAAE;IACP,IAAI,CAACN,aAAa,GAAG,IAAI;IACzB,MAAM;MACJO,OAAO;MACPC,OAAO;MACPC;IACF,CAAC,GAAGH,MAAM,CAACF,IAAI,CAACM,QAAQ,CAAC;IACzB,IAAI,CAACH,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACG,UAAU,GAAGF,CAAC,IAAI,IAAI,CAACG,iBAAiB;EAC/C;EAEAC,aAAaA,CAACf,GAAG,EAAE;IACjB,MAAMK,WAAW,GAAG,IAAI,CAACK,OAAO,CAAC,IAAI,CAACD,OAAO,CAAC;IAC9C,MAAMP,aAAa,GAAG,IAAI,CAACQ,OAAO,CAAC,IAAI,CAACR,aAAa,CAAC;IACtD,OAAOJ,cAAc,CAACO,WAAW,EAAEL,GAAG,EAAE,KAAK,EAAEE,aAAa,CAAC;EAC/D;EAEAS,CAACA,CAACX,GAAG,EAAE,GAAGgB,MAAM,EAAE;IAChB,IAAI,CAAChB,GAAG,CAACiB,UAAU,CAACtB,WAAW,CAAC,EAAE,OAAO,IAAI,CAACS,OAAO,CAACJ,GAAG,EAAEgB,MAAM,CAAC;IAClE,OAAO,IAAI,CAACH,UAAU,CAACb,GAAG,EAAE,GAAGgB,MAAM,CAAC;EACxC;EAEAF,iBAAiBA,CAACd,GAAG,EAAE,GAAGgB,MAAM,EAAE;IAChC,OAAO,IAAI,CAACZ,OAAO,CAAC,IAAI,CAACW,aAAa,CAACf,GAAG,CAAC,EAAEgB,MAAM,CAAC;EACtD;EAEAZ,OAAOA,CAACc,GAAG,EAAEF,MAAM,EAAE;IACnB,OAAOE,GAAG,CAACd,OAAO,CAAC,YAAY,EAAE,CAACe,KAAK,EAAEC,KAAK,KAAK;MACjD;MACA,OAAOC,MAAM,CAACL,MAAM,CAAC,CAACI,KAAK,CAAC,CAAC;IAC/B,CAAC,CAAC;EACJ;AAEF;AACAd,IAAI,CAACM,QAAQ,GAAG,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}