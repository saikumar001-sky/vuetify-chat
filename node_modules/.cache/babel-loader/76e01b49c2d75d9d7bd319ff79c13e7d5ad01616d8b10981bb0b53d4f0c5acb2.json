{"ast":null,"code":"import { keys } from '../../util/helpers';\nimport { colorToInt, intToHex, colorToHex } from '../../util/colorUtils';\nimport * as sRGB from '../../util/color/transformSRGB';\nimport * as LAB from '../../util/color/transformCIELAB';\nexport function parse(theme, isItem = false, variations = true) {\n  const {\n    anchor,\n    ...variant\n  } = theme;\n  const colors = Object.keys(variant);\n  const parsedTheme = {};\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i];\n    const value = theme[name];\n    if (value == null) continue;\n    if (!variations) {\n      parsedTheme[name] = {\n        base: intToHex(colorToInt(value))\n      };\n    } else if (isItem) {\n      /* istanbul ignore else */\n      if (name === 'base' || name.startsWith('lighten') || name.startsWith('darken')) {\n        parsedTheme[name] = colorToHex(value);\n      }\n    } else if (typeof value === 'object') {\n      parsedTheme[name] = parse(value, true, variations);\n    } else {\n      parsedTheme[name] = genVariations(name, colorToInt(value));\n    }\n  }\n  if (!isItem) {\n    parsedTheme.anchor = anchor || parsedTheme.base || parsedTheme.primary.base;\n  }\n  return parsedTheme;\n}\n/**\n * Generate the CSS for a base color (.primary)\n */\n\nconst genBaseColor = (name, value) => {\n  return `\n.v-application .${name} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.v-application .${name}--text {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`;\n};\n/**\n * Generate the CSS for a variant color (.primary.darken-2)\n */\n\nconst genVariantColor = (name, variant, value) => {\n  const [type, n] = variant.split(/(\\d)/, 2);\n  return `\n.v-application .${name}.${type}-${n} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.v-application .${name}--text.text--${type}-${n} {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`;\n};\nconst genColorVariableName = (name, variant = 'base') => `--v-${name}-${variant}`;\nconst genColorVariable = (name, variant = 'base') => `var(${genColorVariableName(name, variant)})`;\nexport function genStyles(theme, cssVar = false) {\n  const {\n    anchor,\n    ...variant\n  } = theme;\n  const colors = Object.keys(variant);\n  if (!colors.length) return '';\n  let variablesCss = '';\n  let css = '';\n  const aColor = cssVar ? genColorVariable('anchor') : anchor;\n  css += `.v-application a { color: ${aColor}; }`;\n  cssVar && (variablesCss += `  ${genColorVariableName('anchor')}: ${anchor};\\n`);\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i];\n    const value = theme[name];\n    css += genBaseColor(name, cssVar ? genColorVariable(name) : value.base);\n    cssVar && (variablesCss += `  ${genColorVariableName(name)}: ${value.base};\\n`);\n    const variants = keys(value);\n    for (let i = 0; i < variants.length; ++i) {\n      const variant = variants[i];\n      const variantValue = value[variant];\n      if (variant === 'base') continue;\n      css += genVariantColor(name, variant, cssVar ? genColorVariable(name, variant) : variantValue);\n      cssVar && (variablesCss += `  ${genColorVariableName(name, variant)}: ${variantValue};\\n`);\n    }\n  }\n  if (cssVar) {\n    variablesCss = `:root {\\n${variablesCss}}\\n\\n`;\n  }\n  return variablesCss + css;\n}\nexport function genVariations(name, value) {\n  const values = {\n    base: intToHex(value)\n  };\n  for (let i = 5; i > 0; --i) {\n    values[`lighten${i}`] = intToHex(lighten(value, i));\n  }\n  for (let i = 1; i <= 4; ++i) {\n    values[`darken${i}`] = intToHex(darken(value, i));\n  }\n  return values;\n}\nexport function lighten(value, amount) {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] + amount * 10;\n  return sRGB.fromXYZ(LAB.toXYZ(lab));\n}\nexport function darken(value, amount) {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] - amount * 10;\n  return sRGB.fromXYZ(LAB.toXYZ(lab));\n}","map":{"version":3,"names":["keys","colorToInt","intToHex","colorToHex","sRGB","LAB","parse","theme","isItem","variations","anchor","variant","colors","Object","parsedTheme","i","length","name","value","base","startsWith","genVariations","primary","genBaseColor","genVariantColor","type","n","split","genColorVariableName","genColorVariable","genStyles","cssVar","variablesCss","css","aColor","variants","variantValue","values","lighten","darken","amount","lab","fromXYZ","toXYZ"],"sources":["/home/sai/Desktop/SoftChat/softchat/node_modules/vuetify/lib/services/theme/utils.js"],"sourcesContent":["import { keys } from '../../util/helpers';\nimport { colorToInt, intToHex, colorToHex } from '../../util/colorUtils';\nimport * as sRGB from '../../util/color/transformSRGB';\nimport * as LAB from '../../util/color/transformCIELAB';\nexport function parse(theme, isItem = false, variations = true) {\n  const {\n    anchor,\n    ...variant\n  } = theme;\n  const colors = Object.keys(variant);\n  const parsedTheme = {};\n\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i];\n    const value = theme[name];\n    if (value == null) continue;\n\n    if (!variations) {\n      parsedTheme[name] = {\n        base: intToHex(colorToInt(value))\n      };\n    } else if (isItem) {\n      /* istanbul ignore else */\n      if (name === 'base' || name.startsWith('lighten') || name.startsWith('darken')) {\n        parsedTheme[name] = colorToHex(value);\n      }\n    } else if (typeof value === 'object') {\n      parsedTheme[name] = parse(value, true, variations);\n    } else {\n      parsedTheme[name] = genVariations(name, colorToInt(value));\n    }\n  }\n\n  if (!isItem) {\n    parsedTheme.anchor = anchor || parsedTheme.base || parsedTheme.primary.base;\n  }\n\n  return parsedTheme;\n}\n/**\n * Generate the CSS for a base color (.primary)\n */\n\nconst genBaseColor = (name, value) => {\n  return `\n.v-application .${name} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.v-application .${name}--text {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`;\n};\n/**\n * Generate the CSS for a variant color (.primary.darken-2)\n */\n\n\nconst genVariantColor = (name, variant, value) => {\n  const [type, n] = variant.split(/(\\d)/, 2);\n  return `\n.v-application .${name}.${type}-${n} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.v-application .${name}--text.text--${type}-${n} {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`;\n};\n\nconst genColorVariableName = (name, variant = 'base') => `--v-${name}-${variant}`;\n\nconst genColorVariable = (name, variant = 'base') => `var(${genColorVariableName(name, variant)})`;\n\nexport function genStyles(theme, cssVar = false) {\n  const {\n    anchor,\n    ...variant\n  } = theme;\n  const colors = Object.keys(variant);\n  if (!colors.length) return '';\n  let variablesCss = '';\n  let css = '';\n  const aColor = cssVar ? genColorVariable('anchor') : anchor;\n  css += `.v-application a { color: ${aColor}; }`;\n  cssVar && (variablesCss += `  ${genColorVariableName('anchor')}: ${anchor};\\n`);\n\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i];\n    const value = theme[name];\n    css += genBaseColor(name, cssVar ? genColorVariable(name) : value.base);\n    cssVar && (variablesCss += `  ${genColorVariableName(name)}: ${value.base};\\n`);\n    const variants = keys(value);\n\n    for (let i = 0; i < variants.length; ++i) {\n      const variant = variants[i];\n      const variantValue = value[variant];\n      if (variant === 'base') continue;\n      css += genVariantColor(name, variant, cssVar ? genColorVariable(name, variant) : variantValue);\n      cssVar && (variablesCss += `  ${genColorVariableName(name, variant)}: ${variantValue};\\n`);\n    }\n  }\n\n  if (cssVar) {\n    variablesCss = `:root {\\n${variablesCss}}\\n\\n`;\n  }\n\n  return variablesCss + css;\n}\nexport function genVariations(name, value) {\n  const values = {\n    base: intToHex(value)\n  };\n\n  for (let i = 5; i > 0; --i) {\n    values[`lighten${i}`] = intToHex(lighten(value, i));\n  }\n\n  for (let i = 1; i <= 4; ++i) {\n    values[`darken${i}`] = intToHex(darken(value, i));\n  }\n\n  return values;\n}\nexport function lighten(value, amount) {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] + amount * 10;\n  return sRGB.fromXYZ(LAB.toXYZ(lab));\n}\nexport function darken(value, amount) {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] - amount * 10;\n  return sRGB.fromXYZ(LAB.toXYZ(lab));\n}\n//# sourceMappingURL=utils.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}