{"ast":null,"code":"// Utilities\nimport { consoleWarn } from './console';\nimport { chunk, padEnd } from './helpers';\nimport { toXYZ } from './color/transformSRGB';\nexport function isCssColor(color) {\n  return !!color && !!color.match(/^(#|var\\(--|(rgb|hsl)a?\\()/);\n}\nexport function colorToInt(color) {\n  let rgb;\n  if (typeof color === 'number') {\n    rgb = color;\n  } else if (typeof color === 'string') {\n    let c = color[0] === '#' ? color.substring(1) : color;\n    if (c.length === 3) {\n      c = c.split('').map(char => char + char).join('');\n    }\n    if (c.length !== 6) {\n      consoleWarn(`'${color}' is not a valid rgb color`);\n    }\n    rgb = parseInt(c, 16);\n  } else {\n    throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`);\n  }\n  if (rgb < 0) {\n    consoleWarn(`Colors cannot be negative: '${color}'`);\n    rgb = 0;\n  } else if (rgb > 0xffffff || isNaN(rgb)) {\n    consoleWarn(`'${color}' is not a valid rgb color`);\n    rgb = 0xffffff;\n  }\n  return rgb;\n}\nexport function classToHex(color, colors, currentTheme) {\n  const [colorName, colorModifier] = color.toString().trim().replace('-', '').split(' ', 2);\n  let hexColor = '';\n  if (colorName && colorName in colors) {\n    if (colorModifier && colorModifier in colors[colorName]) {\n      hexColor = colors[colorName][colorModifier];\n    } else if ('base' in colors[colorName]) {\n      hexColor = colors[colorName].base;\n    }\n  } else if (colorName && colorName in currentTheme) {\n    hexColor = currentTheme[colorName];\n  }\n  return hexColor;\n}\nexport function intToHex(color) {\n  let hexColor = color.toString(16);\n  if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor;\n  return '#' + hexColor;\n}\nexport function colorToHex(color) {\n  return intToHex(colorToInt(color));\n}\n/**\n * Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color HSVA color as an array [0-360, 0-1, 0-1, 0-1]\n */\n\nexport function HSVAtoRGBA(hsva) {\n  const {\n    h,\n    s,\n    v,\n    a\n  } = hsva;\n  const f = n => {\n    const k = (n + h / 60) % 6;\n    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  };\n  const rgb = [f(5), f(3), f(1)].map(v => Math.round(v * 255));\n  return {\n    r: rgb[0],\n    g: rgb[1],\n    b: rgb[2],\n    a\n  };\n}\n/**\n * Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color RGBA color as an array [0-255, 0-255, 0-255, 0-1]\n */\n\nexport function RGBAtoHSVA(rgba) {\n  if (!rgba) return {\n    h: 0,\n    s: 1,\n    v: 1,\n    a: 1\n  };\n  const r = rgba.r / 255;\n  const g = rgba.g / 255;\n  const b = rgba.b / 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n  if (max !== min) {\n    if (max === r) {\n      h = 60 * (0 + (g - b) / (max - min));\n    } else if (max === g) {\n      h = 60 * (2 + (b - r) / (max - min));\n    } else if (max === b) {\n      h = 60 * (4 + (r - g) / (max - min));\n    }\n  }\n  if (h < 0) h = h + 360;\n  const s = max === 0 ? 0 : (max - min) / max;\n  const hsv = [h, s, max];\n  return {\n    h: hsv[0],\n    s: hsv[1],\n    v: hsv[2],\n    a: rgba.a\n  };\n}\nexport function HSVAtoHSLA(hsva) {\n  const {\n    h,\n    s,\n    v,\n    a\n  } = hsva;\n  const l = v - v * s / 2;\n  const sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l);\n  return {\n    h,\n    s: sprime,\n    l,\n    a\n  };\n}\nexport function HSLAtoHSVA(hsl) {\n  const {\n    h,\n    s,\n    l,\n    a\n  } = hsl;\n  const v = l + s * Math.min(l, 1 - l);\n  const sprime = v === 0 ? 0 : 2 - 2 * l / v;\n  return {\n    h,\n    s: sprime,\n    v,\n    a\n  };\n}\nexport function RGBAtoCSS(rgba) {\n  return `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`;\n}\nexport function RGBtoCSS(rgba) {\n  return RGBAtoCSS({\n    ...rgba,\n    a: 1\n  });\n}\nexport function RGBAtoHex(rgba) {\n  const toHex = v => {\n    const h = Math.round(v).toString(16);\n    return ('00'.substr(0, 2 - h.length) + h).toUpperCase();\n  };\n  return `#${[toHex(rgba.r), toHex(rgba.g), toHex(rgba.b), toHex(Math.round(rgba.a * 255))].join('')}`;\n}\nexport function HexToRGBA(hex) {\n  const rgba = chunk(hex.slice(1), 2).map(c => parseInt(c, 16));\n  return {\n    r: rgba[0],\n    g: rgba[1],\n    b: rgba[2],\n    a: Math.round(rgba[3] / 255 * 100) / 100\n  };\n}\nexport function HexToHSVA(hex) {\n  const rgb = HexToRGBA(hex);\n  return RGBAtoHSVA(rgb);\n}\nexport function HSVAtoHex(hsva) {\n  return RGBAtoHex(HSVAtoRGBA(hsva));\n}\nexport function parseHex(hex) {\n  if (hex.startsWith('#')) {\n    hex = hex.slice(1);\n  }\n  hex = hex.replace(/([^0-9a-f])/gi, 'F');\n  if (hex.length === 3 || hex.length === 4) {\n    hex = hex.split('').map(x => x + x).join('');\n  }\n  if (hex.length === 6) {\n    hex = padEnd(hex, 8, 'F');\n  } else {\n    hex = padEnd(padEnd(hex, 6), 8, 'F');\n  }\n  return `#${hex}`.toUpperCase().substr(0, 9);\n}\nexport function parseGradient(gradient, colors, currentTheme) {\n  return gradient.replace(/([a-z]+(\\s[a-z]+-[1-5])?)(?=$|,)/gi, x => {\n    return classToHex(x, colors, currentTheme) || x;\n  }).replace(/(rgba\\()#[0-9a-f]+(?=,)/gi, x => {\n    return 'rgba(' + Object.values(HexToRGBA(parseHex(x.replace(/rgba\\(/, '')))).slice(0, 3).join(',');\n  });\n}\nexport function RGBtoInt(rgba) {\n  return (rgba.r << 16) + (rgba.g << 8) + rgba.b;\n}\n/**\n * Returns the contrast ratio (1-21) between two colors.\n *\n * @param c1 First color\n * @param c2 Second color\n */\n\nexport function contrastRatio(c1, c2) {\n  const [, y1] = toXYZ(RGBtoInt(c1));\n  const [, y2] = toXYZ(RGBtoInt(c2));\n  return (Math.max(y1, y2) + 0.05) / (Math.min(y1, y2) + 0.05);\n}","map":{"version":3,"names":["consoleWarn","chunk","padEnd","toXYZ","isCssColor","color","match","colorToInt","rgb","c","substring","length","split","map","char","join","parseInt","TypeError","constructor","name","isNaN","classToHex","colors","currentTheme","colorName","colorModifier","toString","trim","replace","hexColor","base","intToHex","repeat","colorToHex","HSVAtoRGBA","hsva","h","s","v","a","f","n","k","Math","max","min","round","r","g","b","RGBAtoHSVA","rgba","hsv","HSVAtoHSLA","l","sprime","HSLAtoHSVA","hsl","RGBAtoCSS","RGBtoCSS","RGBAtoHex","toHex","substr","toUpperCase","HexToRGBA","hex","slice","HexToHSVA","HSVAtoHex","parseHex","startsWith","x","parseGradient","gradient","Object","values","RGBtoInt","contrastRatio","c1","c2","y1","y2"],"sources":["/home/sai/Desktop/SoftChat/softchat/node_modules/vuetify/lib/util/colorUtils.js"],"sourcesContent":["// Utilities\nimport { consoleWarn } from './console';\nimport { chunk, padEnd } from './helpers';\nimport { toXYZ } from './color/transformSRGB';\nexport function isCssColor(color) {\n  return !!color && !!color.match(/^(#|var\\(--|(rgb|hsl)a?\\()/);\n}\nexport function colorToInt(color) {\n  let rgb;\n\n  if (typeof color === 'number') {\n    rgb = color;\n  } else if (typeof color === 'string') {\n    let c = color[0] === '#' ? color.substring(1) : color;\n\n    if (c.length === 3) {\n      c = c.split('').map(char => char + char).join('');\n    }\n\n    if (c.length !== 6) {\n      consoleWarn(`'${color}' is not a valid rgb color`);\n    }\n\n    rgb = parseInt(c, 16);\n  } else {\n    throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`);\n  }\n\n  if (rgb < 0) {\n    consoleWarn(`Colors cannot be negative: '${color}'`);\n    rgb = 0;\n  } else if (rgb > 0xffffff || isNaN(rgb)) {\n    consoleWarn(`'${color}' is not a valid rgb color`);\n    rgb = 0xffffff;\n  }\n\n  return rgb;\n}\nexport function classToHex(color, colors, currentTheme) {\n  const [colorName, colorModifier] = color.toString().trim().replace('-', '').split(' ', 2);\n  let hexColor = '';\n\n  if (colorName && colorName in colors) {\n    if (colorModifier && colorModifier in colors[colorName]) {\n      hexColor = colors[colorName][colorModifier];\n    } else if ('base' in colors[colorName]) {\n      hexColor = colors[colorName].base;\n    }\n  } else if (colorName && colorName in currentTheme) {\n    hexColor = currentTheme[colorName];\n  }\n\n  return hexColor;\n}\nexport function intToHex(color) {\n  let hexColor = color.toString(16);\n  if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor;\n  return '#' + hexColor;\n}\nexport function colorToHex(color) {\n  return intToHex(colorToInt(color));\n}\n/**\n * Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color HSVA color as an array [0-360, 0-1, 0-1, 0-1]\n */\n\nexport function HSVAtoRGBA(hsva) {\n  const {\n    h,\n    s,\n    v,\n    a\n  } = hsva;\n\n  const f = n => {\n    const k = (n + h / 60) % 6;\n    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  };\n\n  const rgb = [f(5), f(3), f(1)].map(v => Math.round(v * 255));\n  return {\n    r: rgb[0],\n    g: rgb[1],\n    b: rgb[2],\n    a\n  };\n}\n/**\n * Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color RGBA color as an array [0-255, 0-255, 0-255, 0-1]\n */\n\nexport function RGBAtoHSVA(rgba) {\n  if (!rgba) return {\n    h: 0,\n    s: 1,\n    v: 1,\n    a: 1\n  };\n  const r = rgba.r / 255;\n  const g = rgba.g / 255;\n  const b = rgba.b / 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n\n  if (max !== min) {\n    if (max === r) {\n      h = 60 * (0 + (g - b) / (max - min));\n    } else if (max === g) {\n      h = 60 * (2 + (b - r) / (max - min));\n    } else if (max === b) {\n      h = 60 * (4 + (r - g) / (max - min));\n    }\n  }\n\n  if (h < 0) h = h + 360;\n  const s = max === 0 ? 0 : (max - min) / max;\n  const hsv = [h, s, max];\n  return {\n    h: hsv[0],\n    s: hsv[1],\n    v: hsv[2],\n    a: rgba.a\n  };\n}\nexport function HSVAtoHSLA(hsva) {\n  const {\n    h,\n    s,\n    v,\n    a\n  } = hsva;\n  const l = v - v * s / 2;\n  const sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l);\n  return {\n    h,\n    s: sprime,\n    l,\n    a\n  };\n}\nexport function HSLAtoHSVA(hsl) {\n  const {\n    h,\n    s,\n    l,\n    a\n  } = hsl;\n  const v = l + s * Math.min(l, 1 - l);\n  const sprime = v === 0 ? 0 : 2 - 2 * l / v;\n  return {\n    h,\n    s: sprime,\n    v,\n    a\n  };\n}\nexport function RGBAtoCSS(rgba) {\n  return `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`;\n}\nexport function RGBtoCSS(rgba) {\n  return RGBAtoCSS({ ...rgba,\n    a: 1\n  });\n}\nexport function RGBAtoHex(rgba) {\n  const toHex = v => {\n    const h = Math.round(v).toString(16);\n    return ('00'.substr(0, 2 - h.length) + h).toUpperCase();\n  };\n\n  return `#${[toHex(rgba.r), toHex(rgba.g), toHex(rgba.b), toHex(Math.round(rgba.a * 255))].join('')}`;\n}\nexport function HexToRGBA(hex) {\n  const rgba = chunk(hex.slice(1), 2).map(c => parseInt(c, 16));\n  return {\n    r: rgba[0],\n    g: rgba[1],\n    b: rgba[2],\n    a: Math.round(rgba[3] / 255 * 100) / 100\n  };\n}\nexport function HexToHSVA(hex) {\n  const rgb = HexToRGBA(hex);\n  return RGBAtoHSVA(rgb);\n}\nexport function HSVAtoHex(hsva) {\n  return RGBAtoHex(HSVAtoRGBA(hsva));\n}\nexport function parseHex(hex) {\n  if (hex.startsWith('#')) {\n    hex = hex.slice(1);\n  }\n\n  hex = hex.replace(/([^0-9a-f])/gi, 'F');\n\n  if (hex.length === 3 || hex.length === 4) {\n    hex = hex.split('').map(x => x + x).join('');\n  }\n\n  if (hex.length === 6) {\n    hex = padEnd(hex, 8, 'F');\n  } else {\n    hex = padEnd(padEnd(hex, 6), 8, 'F');\n  }\n\n  return `#${hex}`.toUpperCase().substr(0, 9);\n}\nexport function parseGradient(gradient, colors, currentTheme) {\n  return gradient.replace(/([a-z]+(\\s[a-z]+-[1-5])?)(?=$|,)/gi, x => {\n    return classToHex(x, colors, currentTheme) || x;\n  }).replace(/(rgba\\()#[0-9a-f]+(?=,)/gi, x => {\n    return 'rgba(' + Object.values(HexToRGBA(parseHex(x.replace(/rgba\\(/, '')))).slice(0, 3).join(',');\n  });\n}\nexport function RGBtoInt(rgba) {\n  return (rgba.r << 16) + (rgba.g << 8) + rgba.b;\n}\n/**\n * Returns the contrast ratio (1-21) between two colors.\n *\n * @param c1 First color\n * @param c2 Second color\n */\n\nexport function contrastRatio(c1, c2) {\n  const [, y1] = toXYZ(RGBtoInt(c1));\n  const [, y2] = toXYZ(RGBtoInt(c2));\n  return (Math.max(y1, y2) + 0.05) / (Math.min(y1, y2) + 0.05);\n}\n//# sourceMappingURL=colorUtils.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}