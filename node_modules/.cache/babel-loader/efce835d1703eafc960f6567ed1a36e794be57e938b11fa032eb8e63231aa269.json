{"ast":null,"code":"import { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\nexport default {\n  data() {\n    return {\n      ffmpeg: null,\n      inputFile: null\n    };\n  },\n  methods: {\n    async handleFileSelect(event) {\n      this.inputFile = event.target.files[0];\n    },\n    async compressVideo() {\n      if (!this.inputFile) return;\n      this.ffmpeg = createFFmpeg({\n        log: true\n      });\n      await this.ffmpeg.load();\n      const inputPath = '/input';\n      const outputPath = '/output.mp4';\n      this.ffmpeg.FS('writeFile', inputPath, await fetchFile(this.inputFile));\n      await this.ffmpeg.run('-i', inputPath, '-vf', 'scale=640:480', outputPath);\n      const compressedData = this.ffmpeg.FS('readFile', outputPath);\n      const compressedFile = new Blob([compressedData.buffer], {\n        type: 'video/mp4'\n      });\n      const downloadLink = document.createElement('a');\n      downloadLink.href = URL.createObjectURL(compressedFile);\n      downloadLink.download = 'compressed_video.mp4';\n      downloadLink.click();\n    }\n  }\n};","map":{"version":3,"names":["createFFmpeg","fetchFile","data","ffmpeg","inputFile","methods","handleFileSelect","event","target","files","compressVideo","log","load","inputPath","outputPath","FS","run","compressedData","compressedFile","Blob","buffer","type","downloadLink","document","createElement","href","URL","createObjectURL","download","click"],"sources":["src/components/CustomChat.vue"],"sourcesContent":["<template>\n  <div>\n    <input type=\"file\" @change=\"handleFileSelect\" />\n    <button @click=\"compressVideo\">Compress Video</button>\n  </div>\n</template>\n\n<script>\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\n\nexport default {\n  data() {\n    return {\n      ffmpeg: null,\n      inputFile: null\n    };\n  },\n  methods: {\n    async handleFileSelect(event) {\n      this.inputFile = event.target.files[0];\n    },\n    async compressVideo() {\n      if (!this.inputFile) return;\n\n      this.ffmpeg = createFFmpeg({ log: true });\n      await this.ffmpeg.load();\n\n      const inputPath = '/input';\n      const outputPath = '/output.mp4';\n\n      this.ffmpeg.FS('writeFile', inputPath, await fetchFile(this.inputFile));\n\n      await this.ffmpeg.run('-i', inputPath, '-vf', 'scale=640:480', outputPath);\n\n      const compressedData = this.ffmpeg.FS('readFile', outputPath);\n      const compressedFile = new Blob([compressedData.buffer], { type: 'video/mp4' });\n\n      const downloadLink = document.createElement('a');\n      downloadLink.href = URL.createObjectURL(compressedFile);\n      downloadLink.download = 'compressed_video.mp4';\n      downloadLink.click();\n    }\n  }\n};\n</script>\n"],"mappings":"AAQA,SAAAA,YAAA,EAAAC,SAAA;AAEA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,SAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,iBAAAC,KAAA;MACA,KAAAH,SAAA,GAAAG,KAAA,CAAAC,MAAA,CAAAC,KAAA;IACA;IACA,MAAAC,cAAA;MACA,UAAAN,SAAA;MAEA,KAAAD,MAAA,GAAAH,YAAA;QAAAW,GAAA;MAAA;MACA,WAAAR,MAAA,CAAAS,IAAA;MAEA,MAAAC,SAAA;MACA,MAAAC,UAAA;MAEA,KAAAX,MAAA,CAAAY,EAAA,cAAAF,SAAA,QAAAZ,SAAA,MAAAG,SAAA;MAEA,WAAAD,MAAA,CAAAa,GAAA,OAAAH,SAAA,0BAAAC,UAAA;MAEA,MAAAG,cAAA,QAAAd,MAAA,CAAAY,EAAA,aAAAD,UAAA;MACA,MAAAI,cAAA,OAAAC,IAAA,EAAAF,cAAA,CAAAG,MAAA;QAAAC,IAAA;MAAA;MAEA,MAAAC,YAAA,GAAAC,QAAA,CAAAC,aAAA;MACAF,YAAA,CAAAG,IAAA,GAAAC,GAAA,CAAAC,eAAA,CAAAT,cAAA;MACAI,YAAA,CAAAM,QAAA;MACAN,YAAA,CAAAO,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}